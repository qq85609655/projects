/**
 * 设定角色的功能权限，尚需要完善
 */
NS.define('Pages.permiss.role.RoleMenuSet',{
    currentChildSystemMenu : {
        mc : '',
        id : 1212,
        checkNum : 8,
        modals : [
            {
                mc : '',
                id : '',
                checkNum : 12,
                menus : [{
                    mc : '',
                    checkNum : 12,
                    funs : [
                        {
                            mc : '',
                            id : ''
                        }
                    ]
                }]
            }
        ]
    },
    modals : [
        {
            mc : '',
            id : ''
        }
    ],
    /**
     * 初始化菜单功能设置
     */
    initMenuSet : function(swc,container,params){
        this.roleId = params.id;//角色ID
        this.role = params;
        this.callSingle({key : 'roleMenu',params : {roleId:params.id}},function(roleMenuList){
//            if(!this.roleMenuSetLayout){
                var layoutCom = this.roleMenuSetLayout = this.getLayoutInstance({
                        layoutTpl : this.menuSetPageTpl,
                        renderNumber: 3,
                        data : {jsmc : params.jsmc}
                    }),
                    currentModalCom = this.currentModalCom = this.getCurrentModalComponent(),
                    childSystemCom = this.childSystemCom = this.getChildSystemComponent(),
                    currentCheckModalCom = this.currentCheckModalCom = this.getCurrentCheckModalComponent();

                layoutCom.register(childSystemCom,1);
                layoutCom.register(currentCheckModalCom,2);

                layoutCom.bindItemsEvent({
                    'cancel.click' : {scope : this,fn : function(){
                        swc.switchTo('rolePage');
                        this.remove(container,layoutCom);
                    }},
                    'submit.click' : {scope : this,fn : function(){
                        var menuIds =  [],hash = this.nodeHash;
                        for(var i in hash){
                            var item = hash[i];
                            if(item.checked == true)menuIds.push(item.id);
                        }
                        this.doUpdateRoleMenuPermiss(this.roleId,menuIds.join(','),function(){
                            swc.switchTo('rolePage');
                            this.remove(container,layoutCom);
                        });
                    }}
                });
                this.add(container,layoutCom);
//            }else{
//
//            }
            this.getAdvanceData(['allMenu'],function(mdata){
                var data = NS.clone(mdata);
                this.generateNodeHash(data.allMenu,roleMenuList);

                this.childSystemCom.refreshTplData(data.allMenu.children);

                this.systemMenus = data.allMenu.children;

                this.currentCheckModalCom.refreshTplData('');
            });
        });
    },
    /**
     * 获取子系统显示组件
     */
    getChildSystemComponent : function(){
        var component = new NS.Component({
            tpl : this.allChildSystemMenuTpl
        });
        component.on('click',function(event,el){
            this.filterNode('TD',el,function(el){
                var itemId = $(el).parent().attr('itemId');
                if(itemId){
                    var node = this.csnode = this.nodeHash[itemId];
                    var system = this.childSystemData = this.translateNode(node);
                    this.currentCheckModalCom.refreshTplData(system);
                }
            });
            this.filterNode('INPUT',el,function(el){
                var itemId = $(el).parent().parent().attr('itemId');
                var node = this.csnode = this.nodeHash[itemId];
                //选中所有子节点、父节点
                this.checkAllChildren(node,$(el)[0].checked);
                this.checkParent(node.id,$(el)[0].checked);
                var system = this.childSystemData = this.translateNode(node);
                this.currentCheckModalCom.refreshTplData(system);
            });


        },this);
        return component;
    },
    /**
     * 获取当前子系统显示组件
     */
    getCurrentModalComponent : function(){
        var component = new NS.Component({
            tpl : this.detailMenuTpl
        });
        return component;
    },
    /**
     * 显示当前子系统的设置权限界面
     */
    getCurrentCheckModalComponent : function(){
        var me = this,
            component = new NS.Component({
            tpl : this.childSystemMenuSetTpl,
            cls : '',
            baseCls : '',
            data  : {}
        });
        component.on('click',function(event,el){
            this.filterNode('INPUT',el,function(el){
                var c = $(el),
                    ctype = c.attr('ctype'),
                    itemId = c.attr('itemid'),
                    checked = c[0].checked,
                    hash = me.nodeHash,
                    modals = me.childSystemData.modals;

                this.check(itemId,checked);//选中子节点

                this.checkParent(itemId,checked);
                this.childSystemData = this.translateNode(this.csnode);
                this.currentCheckModalCom.refreshTplData(this.childSystemData);
                this.childSystemCom.refreshTplData(this.systemMenus);
            });
            this.filterNode('A',el,function(el){
                var c = $(el),
                    ctype = c.attr('ctype'),
                    itemId = c.attr('itemid'),
                    checked = c[0].checked,
                    hash = me.nodeHash,
                    modals = me.childSystemData.modals;
                if(ctype == 'content'){
                    this.showRoleContentSetPage(itemId,this.role);
                }
            });
        },this);
        return component;
    },
    /**
     * 刷新当前角色权限设置页面
     */
    refreshRoleMenuPage : function(){
        this.currentModalCom.refreshTplData(this.currentChildSystemMenu);
        this.currentCheckModalCom.refreshTplData(this.currentChildSystemMenu);
    },
    /******************************数据处理以及转换******************************/
    /**
     * 选中当前节点以及所有子节点
     * @param node
     */
    checkAllChildren : function(node,checked){
        var iterator = node.children,
            bakToIterator = [];
        node.checked = checked;//选中
        while(iterator.length != 0){
            for(var i=0;i<iterator.length;i++){
                var item = iterator[i];
                item.checked = checked;//选中
                bakToIterator = bakToIterator.concat(item.children);
            }
            iterator = bakToIterator;
            bakToIterator = [];
        }
    },
    check : function(itemId,checked){
        if(itemId){
            this.checkAllChildren(this.nodeHash[itemId],checked);
        }else{
            var modals = this.childSystemData.modals,
                sm = modals[modals.length-1],
                menus = sm.menus;
            for(var i=0;i<menus.length;i++){
                var menu = menus[i];
                this.checkAllChildren(this.nodeHash[menu.id],checked);
            }
        }
    },
    checkParent : function(itemId,checked){
        //选中/不选中当前节点以及其父节点
        var hash = this.nodeHash,
            node = hash[itemId],
            pnode = node;
        if(node){
            node.checked = checked;//当前节点直接复制checked
            pnode = hash[pnode.pid];
            while(pnode){
                var pchecked = checked;
                if(!checked){
                    for(var i=0;i<pnode.children.length;i++){
                        var cn = pnode.children[i];
                        if(cn.checked){
                            pchecked = true;
                            break;
                        }
                    }
                }
                pnode.checked = pchecked;
                if(hash[pnode.pid]){
                    pnode = hash[pnode.pid];
                }else{
                    pnode = undefined;
                }
            }
        }
    },
    /**
     * 转置模型数据
     * @param modal {模块}
     */
    translateNode : function(node){
        var system = {},
            modals = [];//模块集合
        system.mc = node.text;
        system.id = node.id;
        system.modals = modals;


        //生成模块
        var children = node.children;
        var specialModal = {//针对子系统下，直接挂接在子系统的菜单
            id : '',
            pid : node.id,
            text : '其他模块',
            checkNum : 0,
            menus : []
        };
        for(var i=0;i<children.length;i++){
            var item = children[i];
            if(item.leaf == "true"){
                specialModal.menus.push(item);
                if(item.checked)specialModal.checkNum+=1;
            }else{
                modals.push({
                    id : item.id,
                    text : item.text,
                    checked : item.checked,
                    menus : [],
                    children : item.children
                });
            }
        }
        //判断特殊菜单是否应该被选中
        specialModal.checked = specialModal.checkNum >0;
        //把模块下的菜单挂接到模块下
        for(var i=0;i<modals.length;i++){
            var modal = modals[i],
                menus = [],
                iterator = [],
                bakToIterator = [];
            iterator = modal.children;
            delete modal.children;

            while(iterator.length != 0){
                for(var j=0;j<iterator.length;j++){
                    var item = iterator[i];
                    if(item.leaf){
                        menus.push(item);
                    }else{
                        bakToIterator = bakToIterator.concat(item.children);
                    }
                }
                iterator = bakToIterator;
                bakToIterator = [];
            }
            modal.menus = menus;
        }
        modals.push(specialModal);
        return system;
    },
    generateNodeHash : function(node,roleMenuList){
        var nodeHash = this.nodeHash = {},
            iterator = node.children,
            len = roleMenuList.length,
            bakToIterator = [];
        while(iterator.length != 0){
            for(var i=0;i<iterator.length;i++){
                var item = iterator[i];
                nodeHash[item.id] = item;
                bakToIterator = bakToIterator.concat(item.children);
            }
            iterator = bakToIterator;
            bakToIterator = [];
        }
        for(var i=0;i<len;i++){
            var item = roleMenuList[i];
            if(nodeHash[item.menuId])nodeHash[item.menuId].checked = true;

        }
    },
    /*************************数据请求*************************************************/
    doUpdateRoleMenuPermiss : function(roleId,menuIds,callback){
        this.doTipRequest({
            key : 'updateRoleMenuPermiss',
            params : {roleId : roleId,menuIds : menuIds},
            successMsg : '角色菜单权限设置成功!',
            failureMsg : '角色菜单权限设置失败!',
            callback : callback
        });
    }
});